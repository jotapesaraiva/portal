{"version":3,"sources":["webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/adder.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/math.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/noop.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/stream.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/area.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/cartesian.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/bounds.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/centroid.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/constant.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/compose.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/rotation.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/circle.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/buffer.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/pointEqual.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/rejoin.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/polygonContains.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/ascending.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/bisect.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/bisector.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/cross.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/array.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/range.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/ticks.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/threshold/sturges.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/merge.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/zip.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/index.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/antimeridian.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/circle.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/line.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/rectangle.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/extent.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/length.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/distance.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/contains.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/graticule.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/interpolate.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/area.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/identity.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/bounds.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/centroid.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/context.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/measure.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/string.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/index.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/transform.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/fit.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/resample.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/index.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/albers.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/albersUsa.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/azimuthal.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/mercator.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conicConformal.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/equirectangular.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/equalEarth.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/gnomonic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/identity.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/naturalEarth1.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/orthographic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/stereographic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///../../../../../src/.internal/charts/map/MapSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/Graticule.ts","webpack:///../../../../../src/.internal/charts/map/GraticuleSeries.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/math.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/aitoff.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/august.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/baker.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/hammer.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mollweide.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/boggs.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/bromley.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/collignon.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/craig.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/craster.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert1.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert2.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert3.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert4.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert5.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert6.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/fahey.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/foucaut.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/newton.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/gingery.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/gringorten.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/elliptic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/guyou.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/healpix.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/hill.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/homolosine.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/lagrange.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/larrivee.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/laskowski.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/littrow.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/miller.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/naturalEarth2.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/nellHammer.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/nicolosi.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/patterson.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/polyconic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/robinson.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/times.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner4.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner6.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner7.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wiechel.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/winkel3.js","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Stereographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Albers.ts","webpack:///../../../../../../src/.internal/charts/map/projections/AlbersUsa.ts","webpack:///../../../../../../src/.internal/charts/map/projections/NaturalEarth1.ts","webpack:///../../../../../../src/.internal/charts/map/projections/AzimuthalEqualArea.ts","webpack:///../../../../../../src/.internal/charts/map/projections/EqualEarth.ts","webpack:///./maps.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/tinyqueue/index.js","webpack:///C:/Dropbox/www/amcharts4dev/node_modules/polylabel/index.js"],"names":["adder","Adder","this","reset","prototype","constructor","s","t","add","y","temp","valueOf","a","b","x","bv","av","math_epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","ceil","exp","log","floor","pow","sin","math_sign","sign","sqrt","tan","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","i","n","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","src_area","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","l","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","push","bounds_linePoint","p","normal","inflection","phii","delta","lambdai","antimeridian","bounds_angle","lambda0","lambda1","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","centroid_z0","src_bounds","feature","merged","deltaMax","Infinity","sort","NaN","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","z","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","m","centroid","constant","compose","invert","rotationIdentity","round","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","src_circle","ring","center","precision","circle","c","apply","arguments","r","_","buffer","line","lines","rejoin","pop","concat","shift","result","pointEqual","Intersection","points","other","entry","o","e","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","rejoin_link","start","current","isSubject","array","polygonContains_sum","polygonContains","polygon","angle","winding","point0","phi0","sinPhi0","cosPhi0","j","sinPhi1","cosPhi1","point1","phi1","absDelta","arc","intersection","phiArc","ascending","ascendingBisect","compare","f","ascendingComparator","left","lo","hi","mid","right","bisector","array_array","Array","src_range","slice","map","stop","max","merge","arrays","src_clip","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","clean","ringSegments","filter","validSegment","clip_antimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","uu","t2","q","polar","q1","code","c0","v0","v00","point2","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","clipMax","clipMin","clipRectangle","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","min","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","src_distance","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","ringRadians","pointRadians","contains","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","outline","reverse","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","distance","src_identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","projection","projectionStream","contextStream","path","src_transform","methods","transformer","TransformStream","key","fit","fitBounds","clipExtent","scale","translate","fitExtent","h","fitSize","size","fitWidth","width","fitHeight","height","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","transform","projection_projection","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","theta","preclip","postclip","recenter","transformRotate","undefined","clipAngle","conicProjection","parallels","conicEqualAreaRaw","cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","multiplex","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercator","mercatorProjection","reclip","tany","conicConformalRaw","fy","conicConformal","equirectangularRaw","projection_equirectangular","conicEquidistantRaw","g","gy","nx","conicEquidistant","A1","equalEarth_A2","A3","A4","equalEarth_M","equalEarthRaw","l2","l6","equalEarth","gnomonicRaw","gnomonic","identity_scaleTranslate","kx","ky","tx","ty","projection_identity","sx","sy","reflectX","reflectY","naturalEarth1Raw","phi4","naturalEarth1","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","MapSeries_MapSeriesDataItem","_super","MapSeriesDataItem","_this","call","className","values","value","applyTheme","tslib_es6","Object","defineProperty","setValue","properties","setProperty","_east","_west","_south","_north","updateExtremes","getFeature","west","south","north","east","changed","utils_Math","component","invalidateDataItems","Series","MapSeries_MapSeries","MapSeries","isMeasured","nonScalingStroke","dataFields","ignoreBounds","createDataItem","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","chart","handleObjectAdded","event","mapObject","newValue","parent","series","strokeWidth","_geodata","geodata","data","_dataSources","getDataSource","removeDispose","events","on","loadData","setDataSourceEvents","getFeatures","validateDataItems","dataItems","each","dataItem","Type","_mapObjects","dispatch","_northDefined","_southDefined","_westDefined","_eastDefined","processConfig","config","name_1","window","JSON","parse","Error","Registry","registeredClasses","MapObject_MapObject","MapObject","layout","clickable","validate","readerTitle","itemReaderText","Container","MapImage_MapImage","MapImage","validatePosition","latitude","longitude","d3Projection","d3Path","__disabled","multiPolygonToGeo","multiPolygon","multiGeoArea","len","surface","hole","multiPointToGeo","multiLineToGeo","multiLine","multiGeoLine","geoPoints","pointToGeo","multiGeoToPoint","multiGeoLineToMultiLine","utils_Array","multiLineSegment","geoPoint","multiGeoPolygonToMultipolygon","multiGeoPolygon","getCircle","getBackground","stepLong","stepLat","ln","ll","lt","MapPolygon_MapPolygon","MapPolygon","createChild","shouldClone","applyOnClones","interfaceColors","InterfaceColorSet","fill","getFor","stroke","strokeOpacity","tooltipPosition","pathGenerator","calculateVisualCenter","biggestArea","biggestPolygon","polylabel_default","_visualLongitude","_visualLatitude","measureElement","adapter","pixelWidth","pixelHeight","copyFrom","source","getTooltipX","convert","visualLongitude","visualLatitude","getTooltipY","MapPolygonSeries_MapPolygonSeriesDataItem","MapPolygonSeriesDataItem","_mapPolygon","mapPolygon_1","mapPolygons","create","addSprite","_disposers","Disposer","removeValue","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","MapPolygonSeries_MapPolygonSeries","MapPolygonSeries","clear","validateData","useGeodata","geoJSON","console","id_1","this_1","include","exclude","dataObject","Utils","mapPolygon","zIndex","propertyFields","boxArea","_mapPolygons","polygonTemplate","List","template","focusable","getPolygonById","Iterator","iterator","dataContext","_dataItem","Projection_Projection","Projection","deltaLongitude","deltaLatitude","deltaGama","_d3Projection","_d3Path","unproject","unrotate","intermediatePoint","pointA","pointB","position","multiDistance","positionToPoint","positionToGeoPoint","intermediatePointA","intermediatePointB","pa","pb","totalDistance","currentDistance","positionA","positionB","positionAB","SmallMap_SmallMap","SmallMap","_chart","align","valign","percentHeight","percentWidth","margin","background","fillOpacity","moveToPosition","updateMapSize","seriesContainer","rectangle","Rectangle","Color","verticalCenter","horizontalCenter","_series","handleSeriesAdded","handleSeriesRemoved","newSeries","clone","dataUsers","interactionsEnabled","hidden","invalidate","rectPoint","spritePoint","seriesPointToGeo","zoomToGeoPoint","zoomLevel","get","set","updateRectangle","pixelX","pixelY","scaleRatio","bbox","group","node","getBBox","afterDraw","maskRectangle","hasKey","getKey","normalizePoint","wrapAngleTo180","latitude180","normalizeMultiline","multiline","multiline_1","multiline_1_1","next","done","segment_1","segment_1_1","geoToPoint","MapLineObject_MapLineObject","MapLineObject","adjustRotation","mapLine","shortestDistance","MapImageSeries_MapImageSeriesDataItem","MapImageSeriesDataItem","_mapImage","mapImage_1","mapImages","_geoPoint","MapImageSeries_MapImageSeries","MapImageSeries","multiPoint","multiGeoPoint","_parseDataFrom","mapImage","isDisposed","moveValue","_mapImages","validateDataElement","getImageById","MapLine_MapLine","MapLine","_imageListeners","createLine","Polyline","images","handleImagesToConnect","imagesToConnect","image","img","disposer","property","_a","_b","convertedPoints","convertedSegmentPoints","slen","_arrow","lineObjects","handleGlobalScale","_lineObjects","handleLineObjectAdded","mapLineObject","arrow","triangle","Triangle","Percent","MapLineSeries_MapLineSeriesDataItem","MapLineSeriesDataItem","_mapLine","mapLine_1","mapLines","_multiLine","_multiGeoLine","_geoLine","geoLine","MapLineSeries_MapLineSeries","MapLineSeries","_mapLines","lineTemplate","getLineById","Graticule_Graticule","Graticule","GraticuleSeries_GraticuleSeriesDataItem","GraticuleSeriesDataItem","GraticuleSeries_GraticuleSeries","GraticuleSeries","longitudeStep","latitudeStep","singleSprite","disableType","hiddenInLegend","lineStrings","lineString","MapChart_MapChartDataItem","MapChartDataItem","SerialChart","MapChart_MapChart","MapChart","zoomDuration","zoomEasing","Ease","minZoomLevel","maxZoomLevel","_prevZoomGeoPoint","maxPanOut","homeZoomLevel","zoomStep","padding","backgroundSeries","minWidth","minHeight","once","handleAllInited","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","dragWhileResize","chartContainer","inited","_mapAnimation","allInited_1","updateTooltipBounds","dataInvalid","updateScaleRatio","_zoomGeoPointReal","chartContainerBg","dragStart","target","interactions","downPointers","getIndex","dragStop","handleMapDown","language","Interaction","body","ev","topParent","hasFocused","_zoomControl","thumb","isFocused","Keyboard","getEventKey","pan","mouseWheelBehavior","interaction","handlePanDown","handlePanUp","panSprite","Circle","handlePanMove","opacity","panBehavior","_downPointOrig","pointer","_downDeltaLongitude","_downDeltaLatitude","isResized","dln","dlt","dlg","local","downGeoLocal","geoLocal","updateCenterGeoPoint","goHome","updateZoomGeoPoint","seriesPoint","maxWidth","maxHeight","maxLeft","maxRight","maxTop","maxBottom","seriesWidth","seriesHeight","_centerGeoPoint","ww","hh","minX","maxX","minY","maxY","zoomGeoPoint","applyInternalDefaults","svgPoint","htmlContainer","svgContainer","cssScale","svgPointToGeo","zoomIn","handleWheel","zoomOut","_mouseWheelDisposer","dispose","wheelable","draggable","invalidateProjection","addDisposer","foundGraticule","innerWidth","innerHeight","deltaLong","deltaLat","initialScale","invalidateDataUsers","_backgroundSeries","_fitWidth","_fitHeight","hScale","vScale","geoPointToSVG","geoPointToSeries","dataUser","duration","mapPoint","animate","zoomToMapObject","dataItem_1","polygonPoint","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","zoomControl","createSeries","rotateMap","createClassInstance","configOrder","asIs","field","homeGeoPoint","centerGeoPoint","setPaper","paper","hideOverflow","color","setLegend","legend","MapSpline_MapSpline","MapSpline","Polyspline","tensionX","tensionY","MapArc_MapArc","MapArc","Polyarc","MapSplineSeries_MapSplineSeriesDataItem","MapSplineSeriesDataItem","MapSplineSeries_MapSplineSeries","MapSplineSeries","MapArcSeries_MapArcSeriesDataItem","MapArcSeriesDataItem","MapArcSeries_MapArcSeries","MapArcSeries","ZoomControl_ZoomControl","ZoomControl","plusButton","Button","label","text","slider","handleBackgroundClick","updateThumbSize","handleThumbDrag","minusButton","role","readerLive","fixLayout","marginTop","marginBottom","toFront","toBack","sprite","maxPower","LN2","minPower","power","updateThumb","isKey","stepCount","isDown","createBackground","RoundedRectangle","Mercator_Mercator","Mercator","math_abs","math_atan","math_atan2","math_cos","math_exp","math_floor","math_log","math_max","math_min","math_pow","src_math_sign","math_sin","math_tan","src_math_epsilon","math_epsilon2","math_pi","math_halfPi","math_quarterPi","sqrt1_2","SQRT1_2","sqrt2","math_sqrt","sqrtPi","math_tau","math_degrees","math_radians","math_asin","math_acos","sinh","cosh","aitoffRaw","cosy","sincia","sinci","sinx","sinx_2","cosx_2","siny","sin_2y","sin2y","cos2y","sin2x_2","fx","dxdx","dxdy","dydx","dydy","augustRaw","tanPhi","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","sqrt8","baker_phi0","bakerRaw","cosPhi_2","tanPhi_2","hammerQuarticAuthalicRaw","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","mollweideRaw","boggs_k","boggs_w","boggsRaw","sinusoidalRaw","collignonRaw","sqrt3","crasterRaw","cylindricalEqualArea_cylindricalEqualAreaRaw","eckert1Raw","eckert2Raw","eckert3Raw","eckert4Raw","eckert5Raw","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","_0","_1","s1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","denominator","faheyK","faheyRaw","foucautRaw","cosk","solve","f0","f1","steps","ginzburgPolyconic","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg8Raw","lambda4","gringortenRaw","sLambda","sPhi","r2","p2","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","df","gringortenHexadecant","gringortenHexadecantInvert","ellipticJ","twon","tanh","ellipticF","dPhi","guyouRaw","k_","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","ellipticJi","tn","guyouComplexDivide","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","homolosineRaw","kavrayskiy7Raw","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","laskowskiRaw","lambdaPhi","littrowRaw","y2_1","x2_y2_1","millerRaw","miller","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarSinusoidalRaw","naturalEarth2Raw","phi6","nellHammerRaw","nicolosiRaw","b2","b2d2","d2b2","M","N","x2y2","pi2","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","polyconicRaw","octahedron","collignon_kx","face","collignonK","robinson_K","robinsonRaw","i0","di","bx","by","yy","timesRaw","vanDerGrintenRaw","sinTheta","cosTheta","A2","G","P","P2","P2_A2","G_P2","Q","x2_y2","c3","m1","theta1","vanDerGrinten2Raw","vanDerGrinten3Raw","vanDerGrinten4Raw","B2","C","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","wagner4_A","wagner4_B","wagner6Raw","wagner7Raw","wiechelRaw","sin1_Phi","cosLambda","sinLambda","winkel3Raw","F","cosphi","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","E","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","Miller_Miller","Miller","Eckert6_Eckert6","Eckert6","Orthographic_Orthographic","Orthographic","Stereographic_Stereographic","Stereographic","Albers_Albers","Albers","AlbersUsa_AlbersUsa","AlbersUsa","NaturalEarth1_NaturalEarth1","NaturalEarth1","AzimuthalEqualArea_AzimuthalEqualArea","AzimuthalEqualArea","EqualEarth_EqualEarth","EqualEarth","am4maps","maps_namespaceObject","TinyQueue","defaultCompare","_down","module","exports","default","item","_up","top","peek","pos","halfLength","best","Queue","__webpack_require__","polylabel","debug","cellSize","cellQueue","compareMax","Cell","bestCell","getCentroidCell","bboxCell","numProbes","cell","inside","minDistSq","getSegDistSq","pointToPolygonDist","SQRT2","px","py"],"mappings":"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","file":"maps.js","sourcesContent":["// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/adder.js\n// module id = null\n// module chunks = ","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/math.js\n// module id = null\n// module chunks = ","export default function noop() {}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/noop.js\n// module id = null\n// module chunks = ","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/stream.js\n// module id = null\n// module chunks = ","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/area.js\n// module id = null\n// module chunks = ","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/cartesian.js\n// module id = null\n// module chunks = ","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/bounds.js\n// module id = null\n// module chunks = ","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/centroid.js\n// module id = null\n// module chunks = ","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/constant.js\n// module id = null\n// module chunks = ","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/compose.js\n// module id = null\n// module chunks = ","import compose from \"./compose\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/rotation.js\n// module id = null\n// module chunks = ","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/circle.js\n// module id = null\n// module chunks = ","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/buffer.js\n// module id = null\n// module chunks = ","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/pointEqual.js\n// module id = null\n// module chunks = ","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/rejoin.js\n// module id = null\n// module chunks = ","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/polygonContains.js\n// module id = null\n// module chunks = ","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/ascending.js\n// module id = null\n// module chunks = ","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/bisect.js\n// module id = null\n// module chunks = ","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/bisector.js\n// module id = null\n// module chunks = ","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/cross.js\n// module id = null\n// module chunks = ","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/array.js\n// module id = null\n// module chunks = ","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/range.js\n// module id = null\n// module chunks = ","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/ticks.js\n// module id = null\n// module chunks = ","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/threshold/sturges.js\n// module id = null\n// module chunks = ","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/merge.js\n// module id = null\n// module chunks = ","import transpose from \"./transpose\";\n\nexport default function() {\n  return transpose(arguments);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-array/src/zip.js\n// module id = null\n// module chunks = ","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/index.js\n// module id = null\n// module chunks = ","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/antimeridian.js\n// module id = null\n// module chunks = ","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/circle.js\n// module id = null\n// module chunks = ","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/line.js\n// module id = null\n// module chunks = ","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/rectangle.js\n// module id = null\n// module chunks = ","import clipRectangle from \"./rectangle\";\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/clip/extent.js\n// module id = null\n// module chunks = ","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/length.js\n// module id = null\n// module chunks = ","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/distance.js\n// module id = null\n// module chunks = ","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/contains.js\n// module id = null\n// module chunks = ","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/graticule.js\n// module id = null\n// module chunks = ","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/interpolate.js\n// module id = null\n// module chunks = ","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/area.js\n// module id = null\n// module chunks = ","export default function(x) {\n  return x;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/identity.js\n// module id = null\n// module chunks = ","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/bounds.js\n// module id = null\n// module chunks = ","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/centroid.js\n// module id = null\n// module chunks = ","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/context.js\n// module id = null\n// module chunks = ","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/measure.js\n// module id = null\n// module chunks = ","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/string.js\n// module id = null\n// module chunks = ","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/path/index.js\n// module id = null\n// module chunks = ","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/transform.js\n// module id = null\n// module chunks = ","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/fit.js\n// module id = null\n// module chunks = ","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/resample.js\n// module id = null\n// module chunks = ","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/index.js\n// module id = null\n// module chunks = ","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conic.js\n// module id = null\n// module chunks = ","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conicEqualArea.js\n// module id = null\n// module chunks = ","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/cylindricalEqualArea.js\n// module id = null\n// module chunks = ","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/albers.js\n// module id = null\n// module chunks = ","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/albersUsa.js\n// module id = null\n// module chunks = ","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/azimuthal.js\n// module id = null\n// module chunks = ","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/azimuthalEqualArea.js\n// module id = null\n// module chunks = ","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/azimuthalEquidistant.js\n// module id = null\n// module chunks = ","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/mercator.js\n// module id = null\n// module chunks = ","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conicConformal.js\n// module id = null\n// module chunks = ","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/equirectangular.js\n// module id = null\n// module chunks = ","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/conicEquidistant.js\n// module id = null\n// module chunks = ","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/equalEarth.js\n// module id = null\n// module chunks = ","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/gnomonic.js\n// module id = null\n// module chunks = ","import clipRectangle from \"../clip/rectangle\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, // clip extent\n      postclip = identity,\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n    },\n    postclip: function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    },\n    fitWidth: function(width, object) {\n      return fitWidth(projection, width, object);\n    },\n    fitHeight: function(height, object) {\n      return fitHeight(projection, height, object);\n    }\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/identity.js\n// module id = null\n// module chunks = ","import projection from \"./index\";\nimport {abs, epsilon} from \"../math\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/naturalEarth1.js\n// module id = null\n// module chunks = ","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/orthographic.js\n// module id = null\n// module chunks = ","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/stereographic.js\n// module id = null\n// module chunks = ","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo/src/projection/transverseMercator.js\n// module id = null\n// module chunks = ","/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * South-most latitude.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * North-most latitude.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * East-most longitude.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * West-most longitude.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Shortcut to either [[MapLine]], [[MapImage]], or [[MapPolygon]].\r\n\t */\r\n\tpublic mapObject: MapObject;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * When `zoomToMapObject()` is called the map will either calculate suitable\r\n\t * zoom level itself or use object's `zoomLevel` if set.\r\n\t *\r\n\t * @param value  Zoom level\r\n\t */\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.setProperty(\"zoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.properties[\"zoomLevel\"];\r\n\t}\r\n\r\n\t/**\r\n\t * When `zoomToMapObject()` is called the map will either calculate suitable\r\n\t * center position itself or use object's `zoomGeoPoint` if set.\r\n\t *\r\n\t * @param value  Zoom geo point\r\n\t */\r\n\tpublic set zoomGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setProperty(\"zoomGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom geo point\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.properties[\"zoomGeoPoint\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\treturn this._east;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\treturn this._west;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\treturn this._south;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\treturn this._north;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet geometry = this.getFeature().geometry;\r\n\t\tif (geometry) {\r\n\r\n\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\tlet west = bounds[0][0];\r\n\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\tlet north = bounds[1][1];\r\n\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\tlet changed = false;\r\n\t\t\tif (north != this.north) {\r\n\t\t\t\tthis._north = $math.round(north, 8);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (south != this.south) {\r\n\t\t\t\tthis._south = $math.round(south);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (east != this.east) {\r\n\t\t\t\tthis._east = $math.round(east);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (west != this.west) {\r\n\t\t\t\tthis._west = $math.round(west);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (changed) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field name in data for a numeric value of the map object.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A field name in data for a `zoomLevel` of the map object.\r\n\t */\r\n\tzoomLevel?: string;\r\n\r\n\t/**\r\n\t * A field name in data for a `zoomGeoPoint` of the map object.\r\n\t */\r\n\tzoomGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t */\r\n\texclude?: string[];\r\n\r\n\t/**\r\n\t * Should this series be included when calculating bounds of the map?\r\n\t *\r\n\t * This affects initial zoom as well as limits for zoom/pan.\r\n\t *\r\n\t * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n\t * `MapLineSeries` are not (`false`).\r\n\t */\r\n\tignoreBounds?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents {\r\n\tgeoBoundsChanged: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\tprotected _eastDefined: number;\r\n\r\n\tprotected _westDefined: number;\r\n\r\n\tprotected _southDefined: number;\r\n\r\n\tprotected _northDefined: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: MapChart;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\r\n\tprotected _mapObjects: ListTemplate<MapObject>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param includes  A list of explicitly included ids\r\n\t * @param excludes  A list of explicitly excluded ids\r\n\t * @param id        Id of the object\r\n\t * @return Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element from the GeoJSON?\r\n\t *\r\n\t * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n\t * polygon series will need to contain geographical data in itself in order\r\n\t * to be drawn.\r\n\t *\r\n\t * If this is set to `true`, series will try to extract data for its objects\r\n\t * from either chart-level `geodata` or from series' `geodata` which holds\r\n\t * map infor in GeoJSON format.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series be included when calculating bounds of the map?\r\n\t *\r\n\t * This affects initial zoom as well as limits for zoom/pan.\r\n\t *\r\n\t * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n\t * `MapLineSeries` are not (`false`).\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Ignore bounds?\r\n\t */\r\n\tpublic set ignoreBounds(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"ignoreBounds\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.updateExtremes();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore bounds?\r\n\t */\r\n\tpublic get ignoreBounds(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreBounds\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t\tmapObject.strokeWidth = mapObject.strokeWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.data = [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, undefined, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"Point\" | \"MultiLineString\" | \"MultiPolygon\", coordinates: number[] | number[][][] | number[][][][] } }[] {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateExtremes() {\r\n\t\tlet north: number;\r\n\t\tlet south: number;\r\n\t\tlet east: number;\r\n\t\tlet west: number;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.north > north || !$type.isNumber(north)) {\r\n\t\t\t\tnorth = dataItem.north;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.south < south || !$type.isNumber(south)) {\r\n\t\t\t\tsouth = dataItem.south;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.west < west || !$type.isNumber(west)) {\r\n\t\t\t\twest = dataItem.west;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.east > east || !$type.isNumber(east)) {\r\n\t\t\t\teast = dataItem.east;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this._mapObjects) {\r\n\t\t\tthis._mapObjects.each((mapObject) => {\r\n\t\t\t\tif (mapObject.north > north || !$type.isNumber(north)) {\r\n\t\t\t\t\tnorth = mapObject.north;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.south < south || !$type.isNumber(south)) {\r\n\t\t\t\t\tsouth = mapObject.south;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.west < west || !$type.isNumber(west)) {\r\n\t\t\t\t\twest = mapObject.west;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.east > east || !$type.isNumber(east)) {\r\n\t\t\t\t\teast = mapObject.east;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (this.north != north || this.east != east || this.south != south || this.west != west) {\r\n\t\t\tthis._north = north;\r\n\t\t\tthis._east = east;\r\n\t\t\tthis._west = west;\r\n\t\t\tthis._south = south;\r\n\r\n\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\tif(!this.ignoreBounds){\r\n\t\t\t\tthis.chart.updateExtremes();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * North-most latitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated latitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set north(value: number) {\r\n\t\tthis._northDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._northDefined)) {\r\n\t\t\treturn this._northDefined;\r\n\t\t}\r\n\t\treturn this._north;\r\n\t}\r\n\r\n\t/**\r\n\t * South-most latitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated latitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set south(value: number) {\r\n\t\tthis._southDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._southDefined)) {\r\n\t\t\treturn this._southDefined;\r\n\t\t}\r\n\t\treturn this._south;\r\n\t}\r\n\r\n\t/**\r\n\t * West-most longitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated longitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set west(value: number) {\r\n\t\tthis._westDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._westDefined)) {\r\n\t\t\treturn this._westDefined;\r\n\t\t}\r\n\t\treturn this._west;\r\n\t}\r\n\r\n\t/**\r\n\t * East-most longitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated longitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set east(value: number) {\r\n\t\tthis._eastDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._eastDefined)) {\r\n\t\t\treturn this._eastDefined;\r\n\t\t}\r\n\t\treturn this._east;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthrow Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSeries.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A custom zoom level to use when `zoomToMapObject()` is called on this\r\n\t * map object.\r\n\t */\r\n\tzoomLevel?: number;\r\n\r\n\t/**\r\n\t * A custom point to use when `zoomToMapObject()` is called on this map\r\n\t * object.\r\n\t */\r\n\tzoomGeoPoint?: IGeoPoint;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents {\r\n\tgeoBoundsChanged: {}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet feature = this.getFeature();\r\n\t\tif (feature) {\r\n\t\t\tlet geometry = feature.geometry;\r\n\r\n\t\t\tif (geometry) {\t\t\t\t\r\n\t\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\t\tlet west = bounds[0][0];\r\n\t\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\t\tlet north = bounds[1][1];\r\n\t\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\t\tlet changed = false;\r\n\t\t\t\tif (north != this.north) {\r\n\t\t\t\t\tthis._north = $math.round(north, 8);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (south != this.south) {\r\n\t\t\t\t\tthis._south = $math.round(south);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (east != this.east) {\r\n\t\t\t\t\tthis._east = $math.round(east);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (west != this.west) {\r\n\t\t\t\t\tthis._west = $math.round(west);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\t\t\tif(this.series){\r\n\t\t\t\t\t\tthis.series.invalidateDataItems();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._east)) {\r\n\t\t\treturn this._east;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.east;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._west)) {\r\n\t\t\treturn this._west;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.west;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._south)) {\r\n\t\t\treturn this._south;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.south;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._north)) {\r\n\t\t\treturn this._north;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.north;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\t//this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t\tlet p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\r\n\r\n\t\t\tlet visible: any = this.series.chart.projection.d3Path({ type: 'Point', coordinates: [this.longitude, this.latitude] });\r\n\r\n\t\t\tif (!visible) {\r\n\t\t\t\tthis.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.moveTo({ x: p[0], y: p[1] });\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: number[] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [this.longitude, this.latitude] } };\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i = 0, len = multiPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0, len = multiLine.length; i < len; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiGeoToPoint(geoPoints: IGeoPoint[]): number[][] {\r\n\tlet points: number[][] = [];\r\n\tfor (let i = 0, len = geoPoints.length; i < len; i++) {\r\n\t\tpoints.push([geoPoints[i].longitude, geoPoints[i].latitude]);\r\n\t}\r\n\treturn points;\r\n}\r\n\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\r\n\r\n\r\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n * \r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\r\nexport function multiGeoLineToMultiLine(multiGeoLine: IGeoPoint[][]): number[][][] {\r\n\tlet multiLine: number[][][] = [];\r\n\t$array.each(multiGeoLine, (segment) => {\r\n\t\tlet multiLineSegment: number[][] = [];\r\n\t\tmultiLine.push(multiLineSegment);\r\n\r\n\t\t$array.each(segment, (geoPoint) => {\r\n\t\t\tmultiLineSegment.push([geoPoint.longitude, geoPoint.latitude]);\r\n\t\t})\r\n\t})\r\n\r\n\treturn multiLine;\r\n}\r\n\r\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n * \r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\r\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon: IGeoPoint[][][]): number[][][][] {\r\n\tlet multiPolygon: number[][][][] = [];\r\n\r\n\tfor (let i = 0, len = multiGeoPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface = multiGeoPolygon[i][0];\r\n\t\tlet hole = multiGeoPolygon[i][1];\r\n\r\n\t\tmultiPolygon[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiPolygon[i].push(multiGeoToPoint(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiPolygon[i].push(multiGeoToPoint(hole));\r\n\t\t}\r\n\t}\r\n\r\n\treturn multiPolygon;\r\n}\r\n\r\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\r\nexport function getCircle(longitude: number, latitude: number, radius: number): number[][][][] {\r\n\treturn [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates];\r\n}\r\n\r\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\r\nexport function getBackground(north: number, east: number, south: number, west: number): number[][][][] {\r\n\r\n\tlet multiPolygon: number[][][][] = [];\r\n\r\n\tif(west == -180){\r\n\t\twest = -179.9999;\r\n\t}\r\n\tif(south == -90){\r\n\t\tsouth = -89.9999;\r\n\t}\t\r\n\tif(north == 90){\r\n\t\tnorth = 89.9999;\r\n\t}\r\n\tif(east == 180){\r\n\t\teast = 179.9999;\r\n\t}\r\n\r\n\r\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\r\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\t\r\n\r\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\r\n\t\tlet surface: number[][] = [];\r\n\t\tmultiPolygon.push([surface]);\r\n\r\n\t\tif(ln + stepLong > east){\r\n\t\t\tstepLong = east - ln;\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\r\n\t\t\tsurface.push([ll, north]);\r\n\t\t}\t\t\r\n\r\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\r\n\t\t\tsurface.push([ln + stepLong, lt]);\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\r\n\t\t\tsurface.push([ll, south]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\r\n\t\t\tsurface.push([ln, lt]);\r\n\t\t}\r\n\r\n\r\n\t}\t\r\n\r\n\treturn multiPolygon;\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport $polylabel from \"polylabel\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of geographical coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Set of screen coordinates for the polygon.\r\n\t */\r\n\tmultiPolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Latitude of the visual center of the polygon.\r\n\t */\r\n\tvisualLatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the visual center of the polygon.\r\n\t */\r\n\tvisualLongitude?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Latitude of the visual center of the polygon.\r\n\t */\r\n\tprotected _visualLatitude: number;\r\n\r\n\t/**\r\n\t * Longitude of the visual center of the polygon.\r\n\t */\r\n\tprotected _visualLongitude: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\t\tthis.polygon.applyOnClones = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: number[][][][] } } {\r\n\t\tif (this.multiPolygon && this.multiPolygon.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: this.multiPolygon } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t\tthis.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\tlet multiGeoPolygon = this.getPropertyValue(\"multiGeoPolygon\");\r\n\t\tif (!multiGeoPolygon && this.dataItem) {\r\n\t\t\tmultiGeoPolygon = this.dataItem.multiPolygon;\r\n\t\t}\r\n\t\treturn multiGeoPolygon;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tif (this.setPropertyValue(\"multiPolygon\", multiPolygon)) {\r\n\t\t\tthis.updateExtremes();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\tlet multiPolygon = this.getPropertyValue(\"multiPolygon\");\r\n\t\tif (!multiPolygon && this.dataItem) {\r\n\t\t\tmultiPolygon = this.dataItem.multiPolygon;\r\n\t\t}\r\n\t\treturn multiPolygon;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tlet pathGenerator = this.series.chart.projection.d3Path;\r\n\r\n\t\t\tif (this.multiPolygon) {\r\n\r\n\t\t\t\tif (this.series) {\r\n\t\t\t\t\tlet feature = { type: \"MultiPolygon\", coordinates: this.multiPolygon };\r\n\t\t\t\t\tthis.polygon.path = pathGenerator(<any>feature);\r\n\t\t\t\t\t//let bounds = pathGenerator.bounds(<any>feature)\r\n\t\t\t\t\t//let bbox: IRectangle = { x: bounds[0][0], y: bounds[0][1], width: bounds[1][0] - bounds[0][0], height: bounds[1][1] - bounds[1][1] };\r\n\t\t\t\t\t//\tlet bbox = this.polygon.group.getBBox();\r\n\t\t\t\t\t//\tthis.polygon.definedBBox = bbox;\r\n\t\t\t\t\t//\tthis.definedBBox = bbox;\r\n\t\t\t\t\t//\tthis.boxArea = bbox.width * bbox.height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.series.calculateVisualCenter) {\r\n\t\t\t\t\tlet biggestArea = 0;\r\n\t\t\t\t\tlet biggestPolygon = this.multiPolygon[0];\r\n\r\n\t\t\t\t\tif (this.multiPolygon.length > 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < this.multiPolygon.length; i++) {\r\n\t\t\t\t\t\t\tlet polygon = this.multiPolygon[i];\r\n\t\t\t\t\t\t\tlet area = d3geo.geoArea({ type: \"Polygon\", coordinates: polygon });\r\n\r\n\t\t\t\t\t\t\tif (area > biggestArea) {\r\n\t\t\t\t\t\t\t\tbiggestPolygon = polygon;\r\n\t\t\t\t\t\t\t\tbiggestArea = area;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet center = $polylabel(biggestPolygon);\r\n\r\n\t\t\t\t\tthis._visualLongitude = center[0];\r\n\t\t\t\t\tthis._visualLatitude = center[1];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._visualLongitude = this.longitude;\r\n\t\t\t\t\tthis._visualLatitude = this.latitude;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the geometrical center of the polygon.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.north + (this.south - this.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the geometrical center of the polygon.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.east + (this.west - this.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the visual center of the polygon.\r\n\t *\r\n\t * It may (and probably won't) coincide with geometrical center.\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set visualLatitude(value: number) {\r\n\t\tthis.setPropertyValue(\"visualLatitude\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Latitude\r\n\t */\r\n\tpublic get visualLatitude(): number {\r\n\t\tlet latitude = this.getPropertyValue(\"visualLatitude\");\r\n\t\tif ($type.isNumber(latitude)) {\r\n\t\t\treturn (latitude);\r\n\t\t}\r\n\t\treturn this.adapter.apply(\r\n\t\t\t\"visualLatitude\",\r\n\t\t\tthis._visualLatitude\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the visual center of the polygon.\r\n\t *\r\n\t * It may (and probably won't) coincide with geometrical center.\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set visualLongitude(value: number) {\r\n\t\tthis.setPropertyValue(\"visualLongitude\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Longitude\r\n\t */\r\n\tpublic get visualLongitude(): number {\r\n\t\tlet longitude = this.getPropertyValue(\"visualLongitude\");\r\n\t\tif ($type.isNumber(longitude)) {\r\n\t\t\treturn (longitude);\r\n\t\t}\r\n\t\treturn this.adapter.apply(\r\n\t\t\t\"visualLongitude\",\r\n\t\t\tthis._visualLongitude\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[MapPolygon]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.polygon.copyFrom(source.polygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateExtremes() {\r\n\t\tsuper.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * used to sorth polygons from big to small\r\n\t */\r\n\tpublic get boxArea() {\r\n\t\treturn (this.north - this.south) * (this.east - this.west);\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\treturn this.series.chart.projection.convert({longitude:this.visualLongitude, latitude:this.visualLatitude}).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\treturn this.series.chart.projection.convert({longitude:this.visualLongitude, latitude:this.visualLatitude}).y\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: number[][][][] } } {\r\n\t\tif (this.multiPolygon && this.multiPolygon.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: this.multiPolygon } };\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\t\t\t\t\t\r\n\t\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\tthis.mapObject = mapPolygon;\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiPolygon = [polygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Indicates if series should automatically calculate visual center of the\r\n\t * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n\t * of the [[MapPolygon]]).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic calculateVisualCenter: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif (this.geodata) {\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\t$utils.used(dataItem.mapPolygon);\r\n\t\t})\r\n\r\n\t\tthis.mapPolygons.each((mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t\t// makes small go first to avoid hover problems with IE\r\n\t\t\tif (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\r\n\t\t\t\tmapPolygon.zIndex = 1000000 - mapPolygon.boxArea;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t\tthis._mapObjects = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: number[][][][] } }[] {\r\n\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: number[][][][] } }[] = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapPolygons.each((mapPolygon)=>{\r\n\t\t\tif (this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapPolygon.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\n//import { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint, IOrientationPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tprotected _d3Projection: d3geo.GeoProjection;\r\n\r\n\tprotected _d3Path: d3geo.GeoPath;\r\n\r\n\tconstructor() {\r\n\t\tthis.d3Projection = d3geo.geoEquirectangular();\r\n\t}\r\n\r\n\tpublic set d3Projection(projection: d3geo.GeoProjection) {\r\n\t\tthis._d3Projection = projection;\r\n\t\tprojection.precision(0.1);\r\n\t\tthis._d3Path = d3geo.geoPath().projection(projection);\r\n\t}\r\n\r\n\tpublic get d3Projection(): d3geo.GeoProjection {\r\n\t\treturn this._d3Projection;\r\n\t}\r\n\r\n\tpublic get d3Path(): d3geo.GeoPath {\r\n\t\treturn this._d3Path;\r\n\t}\r\n\r\n\tpublic get scale(): number {\r\n\t\treturn this.d3Projection.scale() / 100;\r\n\t}\r\n\r\n\t/*\r\n\t\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\t\r\n\t\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\t\r\n\t\t\treturn convertedPoints;\r\n\t\t}\r\n\t\r\n\t\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t\t}\r\n\t\r\n\t\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\t\r\n\t\t\tlet smallNum = 0.00001;\r\n\t\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t\t}\r\n\t\r\n\t\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\t\r\n\t\t\tlet smallNum = 0.00001;\r\n\t\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t\t}\r\n\t\r\n\t\tpublic getRect1(): IGeoRectangle {\r\n\t\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\t\r\n\t\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t\t}\r\n\t\r\n\t\tpublic getRect2(): IGeoRectangle {\r\n\t\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\t\r\n\t\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t\t}\r\n\t\r\n\t\r\n\t\r\n\t\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\t\tif (!geoLine) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\t\r\n\t\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\t\r\n\t\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\t\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\t\r\n\t\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn clippedLine;\r\n\t\t}\r\n\t\r\n\t\r\n\t\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\r\n\t\t\tif (!geoArea) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\t\r\n\t\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\t\r\n\t\t\tlet rect1 = this.getRect1();\r\n\t\t\tlet rect2 = this.getRect2();\r\n\t\r\n\t\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\t\r\n\t\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\t\r\n\t\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\t\r\n\t\t\t\tif (surface) {\r\n\t\r\n\t\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\t\r\n\t\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\t\tclippedArea.push(area);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn clippedArea;\r\n\t\t}\r\n\t\r\n\t\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\t\r\n\t\t\tif (!geoArea) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet convertedPoints: IPoint[][][] = [];\r\n\t\r\n\t\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\t\r\n\t\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\t\r\n\t\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\t\r\n\t\t\t\tif (surface) {\r\n\t\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\t\r\n\t\t\t\t\tfor (let s = 0, slen = surface.length; s < slen; s++) {\r\n\t\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\t\r\n\t\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif (hole) {\r\n\t\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\t\tfor (let s = 0, hlen = hole.length; s < hlen; s++) {\r\n\t\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\t\r\n\t\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t\t}\r\n\t\t\treturn convertedPoints;\r\n\t\t}\r\n\t\r\n\t\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\t\tif (!geoLine) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet convertedPoints: IPoint[][] = [];\r\n\t\r\n\t\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\r\n\t\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\t\r\n\t\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\t\r\n\t\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\t\r\n\t\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t\t}\r\n\t\t\treturn convertedPoints;\r\n\t\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param geoPoint Geo point (lat/long)\r\n\t * @return Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\t/*\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};*/\r\n\r\n\t\tlet p = this.d3Projection([geoPoint.longitude, geoPoint.latitude]);\r\n\t\treturn { x: p[0], y: p[1] };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param point Screen point (x/y)\r\n\t * @return Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\t/*\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\t*/\r\n\t\tlet p = this.d3Projection.invert([point.x, point.y]);\r\n\r\n\t\treturn { longitude: p[0], latitude: p[1] };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @deprecated\r\n\t * @param lambda [description]\r\n\t * @param phi    [description]\r\n\t * @return X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn this.convert({ longitude: lambda * $math.DEGREES, latitude: phi * $math.DEGREES });\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @deprecated\r\n\t * @param x X coordinate\r\n\t * @param y Y coordinate\r\n\t * @return Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn this.invert({ x: x, y: y });\r\n\t}\r\n\r\n\r\n\tpublic rotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tpublic unrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\t/*\t\r\n\t\t\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\t\t\r\n\t\t\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tlet cp1: IGeoPoint;\r\n\t\t\t\tlet cp2: IGeoPoint;\r\n\t\t\r\n\t\t\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\t\tlet s: IGeoPoint;\r\n\t\t\t\tlet e: IGeoPoint;\r\n\t\t\r\n\t\t\t\t//@todo: make a separate function\r\n\t\t\t\tvar intersection = function() {\r\n\t\t\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\t\t\r\n\t\t\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\t\t\r\n\t\t\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\t\t\r\n\t\t\t\tfor (let j = 0; j < clipPolygon.length; ++j) {\r\n\t\t\t\t\tcp2 = clipPolygon[j];\r\n\t\t\t\t\tlet inputList = segment;\r\n\t\t\t\t\tsegment = [];\r\n\t\t\t\t\ts = inputList[0];\r\n\t\t\t\t\tfor (let i = 0, len = inputList.length; i < len; i++) {\r\n\t\t\t\t\t\te = inputList[i];\r\n\t\t\r\n\t\t\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\ts = e;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcp1 = cp2;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\treturn [segment];\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t//@todo add credits to roseta code\r\n\t\t\t//@todo: someday make it better\r\n\t\t\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\t\t\r\n\t\t\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tlet cp1: IGeoPoint;\r\n\t\t\t\tlet cp2: IGeoPoint;\r\n\t\t\r\n\t\t\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\t\tlet s: IGeoPoint;\r\n\t\t\t\tlet e: IGeoPoint;\r\n\t\t\t\t//@todo: make a separate function\r\n\t\t\t\tvar intersection = function() {\r\n\t\t\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\t\t\r\n\t\t\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\t\tvar outputList = subjectPolygon;\r\n\t\t\r\n\t\t\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\t\t\r\n\t\t\t\tfor (let j = 0; j < clipPolygon.length; ++j) {\r\n\t\t\t\t\tcp2 = clipPolygon[j];\r\n\t\t\t\t\tlet inputList = outputList;\r\n\t\t\t\t\toutputList = [];\r\n\t\t\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\r\n\t\t\t\t\tfor (let i = 0, len = inputList.length; i < len; ++i) {\r\n\t\t\t\t\t\te = inputList[i];\r\n\t\t\r\n\t\t\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ts = e;\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\tcp1 = cp2;\r\n\t\t\t\t}\r\n\t\t\t\treturn outputList;\r\n\t\t\t}\r\n\t\t*/\r\n\t//@todo: move to some utils?\r\n\t/*\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}*/\r\n\t/*\r\n\t\t//@todo: move to some utils?\r\n\t\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n\t\t//@todo: move to some utils?\r\n\t\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t*/\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number): IGeoPoint {\r\n\t\tlet p = d3geo.geoInterpolate([pointA.longitude, pointA.latitude], [pointB.longitude, pointB.latitude])(position);\r\n\t\treturn { longitude: p[0], latitude: p[1] };\r\n\t};\r\n\r\n\t// returns radians\r\n\tpublic multiDistance(multiGeoLine: IGeoPoint[][]): number {\r\n\t\tlet distance = 0;\r\n\t\tfor (let s = 0; s < multiGeoLine.length; s++) {\r\n\t\t\tlet points: IGeoPoint[] = multiGeoLine[s];\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\tlet pointA = points[p - 1];\r\n\t\t\t\t\tlet pointB = points[p];\r\n\t\t\t\t\tdistance += this.distance(pointA, pointB);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t// returns radians\r\n\tpublic distance(pointA: IGeoPoint, pointB: IGeoPoint): number {\r\n\t\treturn d3geo.geoDistance([pointA.longitude, pointA.latitude], [pointB.longitude, pointB.latitude]);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(multiGeoLine: IGeoPoint[][], position: number): IOrientationPoint {\r\n\r\n\t\tif (multiGeoLine) {\r\n\t\t\tlet intermediatePoint = this.positionToGeoPoint(multiGeoLine, position);\r\n\t\t\tlet intermediatePointA = this.positionToGeoPoint(multiGeoLine, position - 0.01);\r\n\t\t\tlet intermediatePointB = this.positionToGeoPoint(multiGeoLine, position + 0.01);\r\n\r\n\t\t\tif (intermediatePointA && intermediatePointB) {\r\n\r\n\t\t\t\tlet point = this.convert(intermediatePoint);\r\n\r\n\t\t\t\tlet pa = this.convert(intermediatePointA);\r\n\t\t\t\tlet pb = this.convert(intermediatePointB);\r\n\r\n\t\t\t\treturn { x: point.x, y: point.y, angle: $math.getAngle(pa, pb) };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToGeoPoint(multiGeoLine: IGeoPoint[][], position: number): IGeoPoint {\r\n\r\n\t\tif (multiGeoLine) {\r\n\t\t\tlet totalDistance: number = this.multiDistance(multiGeoLine);\r\n\t\t\tlet currentDistance: number = 0;\r\n\r\n\t\t\tlet distanceAB: number;\r\n\t\t\tlet positionA: number = 0;\r\n\t\t\tlet positionB: number = 0;\r\n\t\t\tlet pointA: IGeoPoint;\r\n\t\t\tlet pointB: IGeoPoint;\r\n\r\n\t\t\tfor (let s = 0; s < multiGeoLine.length; s++) {\r\n\t\t\t\tlet points: IGeoPoint[] = multiGeoLine[s];\r\n\t\t\t\tif (points.length > 1) {\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tpointA = points[p - 1];\r\n\t\t\t\t\t\tpointB = points[p];\r\n\r\n\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\r\n\t\t\t\t\t\tdistanceAB = this.distance(pointA, pointB);\r\n\t\t\t\t\t\tcurrentDistance += distanceAB;\r\n\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\r\n\r\n\t\t\t\t\t\tif (positionA <= position && positionB > position) {\r\n\t\t\t\t\t\t\ts = multiGeoLine.length;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (points.length == 1) {\r\n\t\t\t\t\tpointA = points[0];\r\n\t\t\t\t\tpointB = points[0];\r\n\t\t\t\t\tpositionA = 0;\r\n\t\t\t\t\tpositionB = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (pointA && pointB) {\r\n\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\r\n\t\t\t\treturn this.intermediatePoint(pointA, pointB, positionAB);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { longitude: 0, latitude: 0 };\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\trectangle.visible = false;\t\t\r\n\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t\tseries.events.on(\"inited\", this.updateMapSize, this, false);\r\n\t\tseries.hidden = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet rectPoint: IPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.chart.seriesPointToGeo(rectPoint);\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil(( - seriesContainer.pixelX) * scale / zoomLevel) + this.seriesContainer.pixelX;\r\n\t\trectangle.y = Math.ceil(( - seriesContainer.pixelY) * scale / zoomLevel) + this.seriesContainer.pixelY;\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tlet scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.seriesContainer.scale = scale;\r\n\r\n\t\t\tlet bbox = this.seriesContainer.group.node.getBBox();\r\n\r\n\t\t\tif(bbox.width > 0){\r\n\t\t\t\tthis.rectangle.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\r\n\t\t\tthis.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\r\n\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\t//this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\r\n\t\tlet mapLine = this.mapLine;\r\n\r\n\t\tif (mapLine) {\r\n\r\n\t\t\tlet point: IOrientationPoint = mapLine.positionToPoint(this.position);\r\n\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\r\n\t\t\t// hide out of bounds\r\n\t\t\tif (mapLine.shortestDistance) {\r\n\r\n\t\t\t\tlet projection = this.mapLine.series.chart.projection;\r\n\r\n\t\t\t\tlet geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\r\n\r\n\t\t\t\tlet visible: any = projection.d3Path({ type: 'Point', coordinates: [geoPoint.longitude, geoPoint.latitude] });\r\n\r\n\t\t\t\tif (!visible) {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: number[] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: this.point } };\r\n\t}\t\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\tthis.mapObject = mapImage;\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis._geoPoint = $mapUtils.pointToGeo(point);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.point = [geoPoint.longitude, geoPoint.latitude];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\tif (type == \"Point\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tif (!mapImage.isDisposed()) {\r\n\t\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\t\tif ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\r\n\t\t\t\t\tdataItem.geoPoint = { latitude: mapImage.latitude, longitude: mapImage.longitude }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t\tthis._mapObjects = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: number[] } }[] {\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: number[] } }[] = [];\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapImages.each((mapImage)=>{\r\n\t\t\tif (this.dataItems.indexOf(mapImage._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapImage.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapImage by id\r\n\t * @param image id\r\n\t * @return {MapImage}\r\n\t */\r\n\tpublic getImageById(id: string): MapImage {\r\n\t\treturn $iter.find(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tlet dataContext: any = mapImage.dataItem.dataContext;\r\n\t\t\tif(mapImage.id == id || dataContext.id == id){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { MapImageSeries } from \"./MapImageSeries\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $geo from \"./Geo\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiLine?: number[][][]\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * A list of actual line objects.\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * A reference to arrow object.\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * A list of event disposers for images.\r\n\t */\r\n\tprotected _imageListeners: { [index: string]: IDisposer } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\tthis.createLine();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.line.parent = this;\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine() {\r\n\t\tthis.line = new Polyline();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.shortestDistance) {\r\n\t\t\treturn this.series.chart.projection.positionToPoint(this.multiGeoLine, position);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.line) {\r\n\t\t\t\treturn this.line.positionToPoint(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tif (multiGeoLine && multiGeoLine.length > 0) {\r\n\t\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\r\n\t\t\tlet multiLine: number[][][] = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\r\n\t\t\tthis.setPropertyValue(\"multiLine\", multiLine);\r\n\r\n\t\t\tthis.updateExtremes();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\tlet multiGeoLine = this.getPropertyValue(\"multiGeoLine\");\r\n\t\tif (!multiGeoLine && this.dataItem && this.dataItem.multiGeoLine) {\r\n\t\t\tmultiGeoLine = this.dataItem.multiGeoLine;\r\n\t\t}\r\n\r\n\t\treturn multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis.setPropertyValue(\"multiLine\", multiLine);\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\r\n\t\tlet multiLine = this.getPropertyValue(\"multiLine\");\r\n\t\tif (!multiLine && this.dataItem && this.dataItem.multiLine) {\r\n\t\t\tmultiLine = this.dataItem.multiLine;\r\n\t\t}\r\n\r\n\t\treturn multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images, true);\r\n\t\tthis.handleImagesToConnect();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\tprotected handleImagesToConnect() {\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tlet multiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tif ($type.isString(image)) {\r\n\t\t\t\t\tlet chart = this.series.chart;\r\n\t\t\t\t\tif (chart) {\r\n\t\t\t\t\t\tchart.series.each((series) => {\r\n\t\t\t\t\t\t\tif (series instanceof MapImageSeries) {\r\n\t\t\t\t\t\t\t\tlet img = series.getImageById(<string>image)\r\n\t\t\t\t\t\t\t\tif (img) {\r\n\t\t\t\t\t\t\t\t\timage = img;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (image instanceof MapImage) {\r\n\r\n\t\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\r\n\t\t\t\t\tif (!this._imageListeners[image.id]) {\r\n\t\t\t\t\t\tlet disposer = image.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\t\t\t\tthis.handleImagesToConnect();\r\n\t\t\t\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this, false);\r\n\t\t\t\t\t\tthis._imageListeners[image.id] = disposer;\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.multiGeoLine = multiGeoLine;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\r\n\t\tif (this.multiLine) {\r\n\r\n\t\t\tif (!this.shortestDistance) {\r\n\r\n\t\t\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\t\t\tfor (let i = 0, len = this.multiLine.length; i < len; i++) {\r\n\r\n\t\t\t\t\tlet segment: number[][] = this.multiLine[i];\r\n\r\n\t\t\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\t\t\tlet geoPoint: number[] = segment[s];\r\n\t\t\t\t\t\tlet point: IPoint = this.series.chart.projection.convert({ longitude: geoPoint[0], latitude: geoPoint[1] });\r\n\t\t\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t\t\t}\r\n\t\t\t\tthis.line.segments = convertedPoints;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.line.path = chart.projection.d3Path(<any>this.getFeature());\r\n\t\t\t}\r\n\r\n\t\t\tif (this._arrow) {\r\n\t\t\t\tthis._arrow.validatePosition();\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\t\tx.validatePosition();\r\n\t\t\t});\r\n\r\n\t\t\tthis.handleGlobalScale();\r\n\t\t}\r\n\t\telse if (this.imagesToConnect) {\r\n\t\t\tthis.handleImagesToConnect();\r\n\t\t}\r\n\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: number[][][] } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0 && this.multiLine[0] && this.multiLine[0].length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects the line consists of.\r\n\t *\r\n\t * @readonly\r\n\t * @return List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.shouldClone = false;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\t//triangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.north + (this.south - this.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.east + (this.west - this.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\treturn this.positionToPoint(0.5).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\treturn this.positionToPoint(0.5).y;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: number[][][] } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapLine;\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiLine = [line];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (type == \"LineString\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLine: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLine) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLine = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t\tthis._mapObjects = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.mapLine);\r\n\t\t})\r\n\r\n\r\n\t\tsuper.validate();\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: number[][][] } }[] {\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: number[][][] } }[] = [];\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tif (this.dataItems.indexOf(mapLine._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapLine.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * returns MapLine by id\r\n\t * @param line id\r\n\t * @return {MapLine}\r\n\t */\r\n\tpublic getLineById(id: string): MapLine {\r\n\t\treturn $iter.find(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tlet dataContext: any = mapLine.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * Graticule (map grid line).\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GraticuleSeries } from \"./GraticuleSeries\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Graticule]].\r\n */\r\nexport interface IGraticuleProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[Graticule]].\r\n */\r\nexport interface IGraticuleEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Graticule]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGraticuleAdapters extends IMapLineAdapters, IGraticuleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Graticule is a map line spanning from the poles or around the globe.\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleEvents} for a list of available events\r\n * @see {@link IGraticuleAdapters} for a list of available Adapters\r\n */\r\nexport class Graticule extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGraticuleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGraticuleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGraticuleEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: GraticuleSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Graticule\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.shortestDistance = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Graticule\"] = Graticule;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Graticule.ts","/**\r\n * Graticule (map grid) series functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { Graticule } from \"./Graticule\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GraticuleSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[Graticule]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GraticuleSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesProperties extends IMapLineSeriesProperties {\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t * \r\n\t * @default 10\r\n\t */\r\n\tlatitudeStep?: number;\r\n\t\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t * \r\n\t * @default 10\r\n\t */\r\n\tlongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t */\r\n\t// majorLatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t */\r\n\t// majorLongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tfitExtent?: boolean;\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tsingleSprite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GraticuleSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGraticuleSeriesAdapters extends IMapLineSeriesAdapters, IGraticuleSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class GraticuleSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGraticuleSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGraticuleSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGraticuleSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGraticuleSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: GraticuleSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeries\";\r\n\r\n\t\tthis.longitudeStep = 10;\r\n\r\n\t\tthis.latitudeStep = 10;\r\n\r\n\t\tthis.north = 90;\r\n\t\tthis.south = -90;\r\n\t\tthis.east = -180;\r\n\t\tthis.west = 180;\r\n\r\n\t\t//this.majorLatitudeStep = 90;\r\n\t\t//this.majorLongitudeStep = 360;\r\n\r\n\t\tthis.fitExtent = true;\r\n\r\n\t\tthis.singleSprite = true;\r\n\r\n\t\tthis.events.disableType(\"geoBoundsChanged\");\r\n\r\n\t\tthis.mapLines.template.line.strokeOpacity = 0.08;\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\tthis.hiddenInLegend = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new GraticuleSeriesDataItem();\r\n\t}\r\n\r\n\tpublic validateData() {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.mapLines.clear();\r\n\r\n\t\tlet graticule = d3geo.geoGraticule();\r\n\r\n\t\tif (graticule) {\r\n\t\t\tgraticule.stepMinor([this.longitudeStep, this.latitudeStep]);\r\n\t\t\t//graticule.stepMajor([this.majorLongitudeStep, this.majorLatitudeStep]);\r\n\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tif (this.fitExtent) {\r\n\t\t\t\tgraticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgraticule.extent([[this.east, this.north], [this.west, this.south]]);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.singleSprite) {\r\n\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\tmapLine.multiLine = graticule().coordinates;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet lineStrings = graticule.lines();\r\n\r\n\t\t\t\t$array.each(lineStrings, (lineString) => {\r\n\t\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\t\tmapLine.multiLine = [lineString.coordinates];\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new Graticule();\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t * \r\n\t * @default 10\r\n\t * @param  value Step\r\n\t */\r\n\tpublic set latitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"latitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get latitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"latitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t * \r\n\t * @default 10\r\n\t * @param  value  Step\r\n\t */\r\n\tpublic set longitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"longitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get longitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"longitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLatitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLatitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLatitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLongitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLongitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLongitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t * \r\n\t * @default true\r\n\t * @param  value  Fit?\r\n\t */\r\n\tpublic set fitExtent(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"fitExtent\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fit?\r\n\t */\r\n\tpublic get fitExtent(): boolean {\r\n\t\treturn this.getPropertyValue(\"fitExtent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t * \r\n\t * @default true\r\n\t * @param  value  Use single sprite?\r\n\t */\r\n\tpublic set singleSprite(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"singleSprite\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use single sprite?\r\n\t */\r\n\tpublic get singleSprite(): boolean {\r\n\t\treturn this.getPropertyValue(\"singleSprite\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\r\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/GraticuleSeries.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { MapPolygonSeries } from \"../map/MapPolygonSeries\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport * as $mapUtils from \"../map/MapUtils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\nimport { Paper } from \"../../core/rendering/Paper\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { GraticuleSeries } from \"../map/GraticuleSeries\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { Legend } from \"../Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tline?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLine?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLine?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around vertical axis (Y).\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal axis (X).\r\n\t *\r\n\t * E.g. setting this to -90 will put Antarctica directly in the center of\r\n\t * the map.\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tdeltaLatitude?: number;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal \"Z\" - an axis that goes from\r\n\t * the center of the globe directly to the viewer.\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tdeltaGamma?: number;\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * A map will start centered on this geographical point.\r\n\t */\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * A map will start zoomed to this level.\r\n\t */\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n\r\n\t/**\r\n\t * What \"dragging\" map does.\r\n\t *\r\n\t * Available values:\r\n\t * * `\"move\"` (default): changes position of the map.\r\n\t * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n\t * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n\t * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n\t * \r\n\t * @default \"move\"\r\n\t * @since 4.3.0\r\n\t */\r\n\tpanBehavior?: \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _fitWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _fitHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\r\n\tpublic panSprite: Circle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downDeltaLongitude: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downDeltaLatitude: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _backgroundSeries: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.deltaLatitude = 0;\r\n\t\tthis.deltaGamma = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\t\tthis.zoomStep = 2;\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t$utils.used(this.backgroundSeries);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", this.handleAllInited, this, false);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.visible = false;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.dragWhileResize = true;\r\n\t\t//seriesContainer.background.fillOpacity = 0;\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\t//this.events.on(\"datavalidated\", this.handleAllValidated, this, false);\r\n\t\t//this.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.parent = this;\r\n\t\tchartContainer.zIndex = -1;\r\n\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet allInited = true;\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t\tif (!series.inited || series.dataInvalid) {\r\n\t\t\t\t\t\tallInited = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allInited) {\r\n\t\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\t}\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\t\t\t}\r\n\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handlePanDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handlePanUp, this));\r\n\t\t//this._disposers.push(interaction.body.events.on(\"track\", this.handlePanMove, this));\r\n\r\n\t\tlet panSprite = this.seriesContainer.createChild(Circle);\r\n\t\tpanSprite.radius = 10;\r\n\t\tpanSprite.inert = true;\r\n\t\tpanSprite.isMeasured = false;\r\n\t\tpanSprite.events.on(\"transformed\", this.handlePanMove, this, false);\r\n\t\tpanSprite.interactionsEnabled = false;\r\n\t\tpanSprite.opacity = 0;\r\n\t\tthis.panSprite = panSprite;\r\n\t\tthis.panBehavior = \"move\";\r\n\t\t/*\t\t\r\n\t\t\t\tthis.panSprite.inertiaOptions.setKey(\"move\", {\r\n\t\t\t\t\t\"time\": 100,\r\n\t\t\t\t\t\"duration\": 1000,\r\n\t\t\t\t\t\"factor\": 3,\r\n\t\t\t\t\t\"easing\": $ease.sinOut\r\n\t\t\t\t});*/\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\t// Get local point\r\n\t\tthis._downPointOrig = $utils.documentPointToSprite(event.pointer.point, this.seriesContainer);\r\n\t\tthis.panSprite.moveTo(this._downPointOrig);\r\n\t\tthis.panSprite.dragStart(event.pointer);\r\n\t\tthis._downDeltaLongitude = this.deltaLongitude;\r\n\t\tthis._downDeltaLatitude = this.deltaLatitude;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanUp(event: IInteractionEvents[\"down\"]): void {\r\n\t\tthis.panSprite.dragStop(event.pointer);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanMove(): void {\r\n\r\n\t\tif (!this.seriesContainer.isResized) {\r\n\r\n\t\t\tlet d3Projection = this.projection.d3Projection;\r\n\r\n\t\t\tlet panBehavior = this.panBehavior;\r\n\r\n\t\t\tif (panBehavior != \"move\" && panBehavior != \"none\" && this._downPointOrig && d3Projection.rotate) {\r\n\r\n\t\t\t\tlet rotation = d3Projection.rotate();\r\n\r\n\t\t\t\tlet dln = rotation[0];\r\n\t\t\t\tlet dlt = rotation[1];\r\n\t\t\t\tlet dlg = rotation[2];\r\n\r\n\t\t\t\td3Projection.rotate([0, 0, 0]);\r\n\r\n\t\t\t\tlet local: IPoint = { x: this.panSprite.pixelX, y: this.panSprite.pixelY };\r\n\r\n\t\t\t\tlet downGeoLocal = this.projection.invert(this._downPointOrig);\r\n\t\t\t\tlet geoLocal = this.projection.invert(local);\r\n\r\n\t\t\t\td3Projection.rotate([dln, dlt, dlg]);\r\n\r\n\t\t\t\tif (panBehavior == \"rotateLat\" || panBehavior == \"rotateLongLat\") {\r\n\t\t\t\t\tthis.deltaLatitude = this._downDeltaLatitude + geoLocal.latitude - downGeoLocal.latitude;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (panBehavior == \"rotateLong\" || panBehavior == \"rotateLongLat\") {\r\n\t\t\t\t\tthis.deltaLongitude = this._downDeltaLongitude + geoLocal.longitude - downGeoLocal.longitude;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAllInited() {\r\n\t\tlet inited = true;\r\n\t\tthis.seriesContainer.visible = true;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (!series.inited || series.dataInvalid) {\r\n\t\t\t\tinited = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (inited) {\r\n\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\tthis.updateScaleRatio();\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tregistry.events.once(\"exitframe\", this.handleAllInited, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateZoomGeoPoint() {\r\n\t\tlet seriesPoint = $utils.svgPointToSprite({ x: this.maxWidth / 2, y: this.maxHeight / 2 }, this.series.getIndex(0));\r\n\t\tlet geoPoint = this.projection.invert(seriesPoint);\r\n\t\tthis._zoomGeoPointReal = geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateCenterGeoPoint() {\r\n\t\tlet maxLeft: number;\r\n\t\tlet maxRight: number;\r\n\t\tlet maxTop: number;\r\n\t\tlet maxBottom: number;\r\n\r\n\r\n\t\tif (this.backgroundSeries) {\r\n\t\t\tlet features = this.backgroundSeries.getFeatures();\r\n\t\t\tif (features.length > 0) {\r\n\t\t\t\tlet bounds = this.projection.d3Path.bounds(<any>features[0].geometry);\r\n\t\t\t\tmaxLeft = bounds[0][0];\r\n\t\t\t\tmaxTop = bounds[0][1];\r\n\t\t\t\tmaxRight = bounds[1][0];\r\n\t\t\t\tmaxBottom = bounds[1][1];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet bbox = series.group.node.getBBox();\r\n\r\n\t\t\t\tif (maxLeft > bbox.x || !$type.isNumber(maxLeft)) {\r\n\t\t\t\t\tmaxLeft = bbox.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxRight < bbox.x + bbox.width || !$type.isNumber(maxRight)) {\r\n\t\t\t\t\tmaxRight = bbox.x + bbox.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxTop > bbox.y || !$type.isNumber(maxTop)) {\r\n\t\t\t\t\tmaxTop = bbox.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxBottom < bbox.y + bbox.height || !$type.isNumber(maxBottom)) {\r\n\t\t\t\t\tmaxBottom = bbox.y + bbox.height;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.seriesWidth = maxRight - maxLeft;\r\n\t\tthis.seriesHeight = maxBottom - maxTop;\r\n\r\n\t\tif (this.seriesWidth > 0 && this.seriesHeight > 0) {\r\n\t\t\tthis.chartContainer.visible = true;\r\n\t\t\tthis._centerGeoPoint = this.projection.invert({ x: maxLeft + (maxRight - maxLeft) / 2, y: maxTop + (maxBottom - maxTop) / 2 });\r\n\r\n\t\t\tif (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\r\n\t\t\t\tthis._zoomGeoPointReal = this._centerGeoPoint;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chartContainer.visible = false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * What \"dragging\" map does.\r\n\t *\r\n\t * Available values:\r\n\t * * `\"move\"` (default): changes position of the map.\r\n\t * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n\t * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n\t * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n\t * \r\n\t * @default \"move\"\r\n\t * @since 4.3.0\r\n\t * @param  value  Behavior\r\n\t */\r\n\tpublic set panBehavior(value: \"none\" | \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\") {\r\n\t\tif (this.setPropertyValue(\"panBehavior\", value)) {\r\n\t\t\tlet seriesContainer = this.seriesContainer;\r\n\t\t\tthis.panSprite.draggable = false;\r\n\t\t\tseriesContainer.draggable = false;\r\n\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase \"move\":\r\n\t\t\t\t\tseriesContainer.draggable = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.panSprite.draggable = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Behavior\r\n\t */\r\n\tpublic get panBehavior(): \"none\" | \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\" {\r\n\t\treturn this.getPropertyValue(\"panBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Albers\r\n\t * * AlbersUSA\r\n\t * * AzimuthalEqualArea\r\n\t * * Eckert6\r\n\t * * EqualEarth\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * NaturalEarth\r\n\t * * Orthographic\r\n\t * * Stereographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Setting_projection} More about projections\r\n\t * @param projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tif (this.setPropertyValue(\"projection\", projection)) {\r\n\t\t\tthis.invalidateProjection();\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tthis.addDisposer(series.events.once(\"validated\", () => {\r\n\t\t\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\t\tthis.goHome(0);\r\n\t\t\t\t}))\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tlet east: number;\r\n\t\tlet north: number;\r\n\t\tlet west: number;\r\n\t\tlet south: number;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.ignoreBounds || (series instanceof GraticuleSeries && series.fitExtent) || series == this.backgroundSeries) {\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.north > north || !$type.isNumber(north)) {\r\n\t\t\t\t\tnorth = series.north;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.south < south || !$type.isNumber(south)) {\r\n\t\t\t\t\tsouth = series.south;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.west < west || !$type.isNumber(west)) {\r\n\t\t\t\t\twest = series.west;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.east > east || !$type.isNumber(east)) {\r\n\t\t\t\t\teast = series.east;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet features: any[] = [];\r\n\t\tlet foundGraticule = false;\r\n\t\t// if we gave graticule, get features of these series only for faster fitSize\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series instanceof GraticuleSeries && !series.fitExtent) {\r\n\t\t\t\tfeatures = series.getFeatures();\r\n\t\t\t\tfoundGraticule = true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (!foundGraticule) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.ignoreBounds || (series instanceof GraticuleSeries && series.fitExtent) || series == this.backgroundSeries) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfeatures = features.concat(series.getFeatures());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet w = $math.max(50, this.innerWidth);\r\n\t\tlet h = $math.max(50, this.innerHeight);\r\n\r\n\t\tlet d3Projection = this.projection.d3Projection;\r\n\r\n\t\tif (features.length > 0 && d3Projection && (this.east != east || this.west != west || this.north != north || this.south != south)) {\r\n\t\t\tthis.east = east;\r\n\t\t\tthis.west = west;\r\n\t\t\tthis.north = north;\r\n\t\t\tthis.south = south;\r\n\t\t\tif (d3Projection.rotate) {\r\n\t\t\t\tlet rotation = d3Projection.rotate();\r\n\t\t\t\tlet deltaLong = rotation[0];\r\n\t\t\t\tlet deltaLat = rotation[1];\r\n\t\t\t\tlet deltaGamma = rotation[2];\r\n\r\n\t\t\t\tthis.deltaLongitude = deltaLong;\r\n\t\t\t\tthis.deltaLatitude = deltaLat;\r\n\t\t\t\tthis.deltaGamma = deltaGamma;\r\n\t\t\t}\r\n\r\n\t\t\tlet geoJSON = { \"type\": \"FeatureCollection\", features: features };\r\n\r\n\t\t\tlet initialScale = d3Projection.scale();\r\n\r\n\t\t\td3Projection.fitSize([w, h], <any>geoJSON);\r\n\r\n\t\t\tif (d3Projection.scale() != initialScale) {\r\n\t\t\t\tthis.invalidateDataUsers();\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series instanceof GraticuleSeries) {\r\n\t\t\t\t\tseries.invalidateData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (this._backgroundSeries) {\r\n\t\t\t\tlet polygon = this._backgroundSeries.mapPolygons.getIndex(0);\r\n\t\t\t\tif (polygon) {\r\n\t\t\t\t\tpolygon.multiPolygon = $mapUtils.getBackground(this.north, this.east, this.south, this.west);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._fitWidth = w;\r\n\t\t\tthis._fitHeight = h;\r\n\t\t}\r\n\r\n\t\tif (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tthis.updateCenterGeoPoint();\r\n\r\n\t\tlet hScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet vScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tscaleRatio = $math.min(hScale, vScale);\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\tdataUser.data = [];\r\n\t\t\t\tdataUser.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param point      Center coordinate\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif (!point || !$type.isNumber(point.longitude) || !$type.isNumber(point.latitude)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tlet mapPoint = $utils.svgPointToSprite(svgPoint, this);\r\n\r\n\t\tif (center) {\r\n\t\t\tmapPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\", from: this.seriesContainer.pixelX,\r\n\t\t\t\tto: mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\", from: this.seriesContainer.pixelY,\r\n\t\t\t\tto: mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param mapObject  Target map object\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tlet dataItem = mapObject.dataItem;\r\n\r\n\t\tif (dataItem && $type.isNumber(dataItem.zoomLevel)) {\r\n\t\t\tzoomLevel = dataItem.zoomLevel;\r\n\t\t}\r\n\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tlet bbox = mapObject.polygon.bbox;\r\n\r\n\t\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\t\tzoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet geoPoint: IGeoPoint;\r\n\r\n\t\t\tif (dataItem && $type.hasValue(dataItem.zoomGeoPoint)) {\r\n\t\t\t\tgeoPoint = dataItem.zoomGeoPoint;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is more accurate\r\n\t\t\t\tlet polygonPoint = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\r\n\t\t\t\tlet seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\r\n\r\n\t\t\t\tgeoPoint = this.seriesPointToGeo(seriesPoint);\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param north     Latitude of the North-most boundary\r\n\t * @param east      Longitude of the East-most boundary\r\n\t * @param south     Latitude of the South-most boundary\r\n\t * @param west      Longitude of the West-most boundary\r\n\t * @param level     Adjust zoom level\r\n\t * @param center    Center on the given coordinate?\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * this.zoomStep, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / this.zoomStep, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param shift     Vertical and horizontal shift\r\n\t * @param duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\tvar point = $utils.spritePointToSvg({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 }, this);\r\n\t\treturn this.svgPointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around vertical axis (Y).\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal axis (X).\r\n\t *\r\n\t * E.g. setting this to -90 will put Antarctica directly in the center of\r\n\t * the map.\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaLatitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLatitude\", value)) {\r\n\t\t\tthis.rotateMap()\r\n\t\t\tthis.updateZoomGeoPoint();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaLatitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLatitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around \"Z\" axis. This is the axis that pierces\r\n\t * the globe directly from the viewer's point of view.\r\n\t * \r\n\t * @param  value  Rotation\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic set deltaGamma(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaGamma\", value)) {\r\n\t\t\tthis.rotateMap()\r\n\t\t\tthis.updateZoomGeoPoint();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaGamma(): number {\r\n\t\treturn this.getPropertyValue(\"deltaGamma\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected rotateMap() {\r\n\t\tif (this.projection.d3Projection) {\r\n\t\t\tif (this.projection.d3Projection.rotate) {\r\n\t\t\t\tthis.projection.d3Projection.rotate([this.deltaLongitude, this.deltaLatitude, this.deltaGamma]);\r\n\t\t\t\tthis.invalidateProjection();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value  Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t *\r\n\t * Call this after changing projection or its settings.\r\n\t */\r\n\tpublic invalidateProjection() {\r\n\t\tthis.invalidateDataUsers();\r\n\t\tthis.updateCenterGeoPoint();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthrow Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tlet series = event.newValue;\r\n\t\tseries.events.on(\"validated\", this.updateCenterGeoPoint, this, false);\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n \t * This function is used to sort element's JSON config properties, so that\r\n \t * some properties that absolutely need to be processed last, can be put at\r\n \t * the end.\r\n \t *\r\n \t * @ignore Exclude from docs\r\n \t * @param a  Element 1\r\n \t * @param b  Element 2\r\n \t * @return Sorting number\r\n \t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this._centerGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t *\r\n\t * Use the only parameter to set number of milliseconds for the zoom\r\n\t * animation to play.\r\n\t * \r\n\t * @param  duration  Duration (ms)\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t * \r\n\t * @ignore\r\n\t * @param   paper  Paper\r\n\t * @return         true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tif (this.svgContainer) {\r\n\t\t\tthis.svgContainer.hideOverflow = true;\r\n\t\t}\r\n\r\n\t\treturn super.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Background series will create polygons that will fill all the map area\r\n\t * with some color (or other fill).\r\n\t * \r\n\t * This might be useful with non-rectangular projections, like Orthographic,\r\n\t * Albers, etc.\r\n\t * \r\n\t * To change background color/opacity access polygon template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"backgroundSeries\": {\r\n\t *     \"mapPolygons\": {\r\n\t *       \"polygon\": {\r\n\t *         \"fill\": \"#fff\",\r\n\t *         \"fillOpacity\": 0.1\r\n\t *       }\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic get backgroundSeries(): MapPolygonSeries {\r\n\t\tif (!this._backgroundSeries) {\r\n\t\t\tlet backgroundSeries = this.series.push(new MapPolygonSeries());\r\n\t\t\tbackgroundSeries.hiddenInLegend = true;\r\n\t\t\tbackgroundSeries.addDisposer(new Disposer(() => {\r\n\t\t\t\tthis._backgroundSeries = undefined;\r\n\t\t\t}))\r\n\t\t\tthis._disposers.push(backgroundSeries);\r\n\r\n\t\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\t\tlet color = interfaceColors.getFor(\"background\");\r\n\r\n\t\t\tlet polygonTemplate = backgroundSeries.mapPolygons.template.polygon;\r\n\t\t\tpolygonTemplate.stroke = color;\r\n\t\t\tpolygonTemplate.fill = color;\r\n\t\t\tpolygonTemplate.fillOpacity = 0;\r\n\t\t\tpolygonTemplate.strokeOpacity = 0;\r\n\r\n\t\t\tbackgroundSeries.mapPolygons.create();\r\n\r\n\t\t\tthis._backgroundSeries = backgroundSeries;\r\n\t\t}\r\n\r\n\t\treturn this._backgroundSeries;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tlegend.parent = this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyarc();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * `shortestDistance = true` is not supported by `MapArc`.\r\n\t *\r\n\t * Only [[MapLine]] supports it.\r\n\t *\r\n\t * @default false\r\n\t * @param value\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\t//plusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\t//minusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected fixLayout() {\r\n\r\n\t\tlet plusButton = this.plusButton;\r\n\t\tlet minusButton = this.minusButton;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tlet slider = this.slider;\r\n\r\n\t\tplusButton.x = undefined;\r\n\t\tplusButton.y = undefined;\r\n\r\n\t\tminusButton.x = undefined;\r\n\t\tminusButton.y = undefined;\r\n\r\n\t\tthumb.x = undefined;\r\n\t\tthumb.y = undefined;\r\n\r\n\t\tslider.x = undefined;\r\n\t\tslider.y = undefined;\r\n\r\n\t\tplusButton.padding(6, 10, 6, 10);\r\n\t\tminusButton.padding(6, 10, 6, 10);\r\n\r\n\t\tminusButton.label.align = \"center\";\r\n\t\tminusButton.label.valign = \"middle\";\r\n\r\n\t\tplusButton.label.align = \"center\";\r\n\t\tplusButton.label.valign = \"middle\";\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tminusButton.width = percent(100);\r\n\t\t\tminusButton.height = undefined;\r\n\r\n\t\t\tthumb.width = percent(100);\r\n\t\t\tthumb.height = undefined;\r\n\r\n\t\t\tplusButton.width = percent(100);\r\n\t\t\tplusButton.height = undefined;\r\n\r\n\t\t\tslider.width = percent(100);\r\n\t\t\tminusButton.marginTop = 1;\r\n\t\t\tplusButton.marginBottom = 2;\r\n\r\n\t\t\tslider.height = 0;\r\n\r\n\t\t\tminusButton.toFront();\r\n\t\t\tplusButton.toBack();\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.maxX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\r\n\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\r\n\t\t\tminusButton.height = percent(100);\r\n\t\t\tminusButton.width = undefined;\r\n\r\n\t\t\tplusButton.height = percent(100);\r\n\t\t\tplusButton.width = undefined;\r\n\r\n\t\t\tthumb.height = percent(100);\r\n\t\t\tthumb.width = undefined;\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\t\t\tthumb.maxY = 0;\r\n\r\n\t\t\tslider.height = percent(100);\r\n\t\t\tslider.width = 0;\r\n\r\n\t\t\tminusButton.toBack();\r\n\t\t\tplusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoMercator();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/math.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/aitoff.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/august.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/baker.js\n// module id = null\n// module chunks = ","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/hammer.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mollweide.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/boggs.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/sinusoidal.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/bromley.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/collignon.js\n// module id = null\n// module chunks = ","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/craig.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/craster.js\n// module id = null\n// module chunks = ","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/cylindricalEqualArea.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert1.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert2.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert3.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert4.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert5.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eckert6.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/eisenlohr.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/fahey.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/foucaut.js\n// module id = null\n// module chunks = ","import {abs, epsilon} from \"./math\";\n\n// Newton-Raphson\n// Solve f(x) = y, start from x\nexport function solve(f, y, x) {\n  var steps = 100, delta, f0, f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = (-1 * epsilon * (f0 - y)) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n  return steps < 0 ? NaN : x;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/newton.js\n// module id = null\n// module chunks = ","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/gingery.js\n// module id = null\n// module chunks = ","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburgPolyconic.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg4.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg5.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg6.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg8.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/ginzburg9.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/gringorten.js\n// module id = null\n// module chunks = ","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/elliptic.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/guyou.js\n// module id = null\n// module chunks = ","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, epsilon, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(\n    range(-180, 180 + step / 2, step).map(sphereTop),\n    range(180, -180 - step / 2, -step).map(sphereBottom)\n  );\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/healpix.js\n// module id = null\n// module chunks = ","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/hill.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/sinuMollweide.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/homolosine.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/kavrayskiy7.js\n// module id = null\n// module chunks = ","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/lagrange.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/larrivee.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/laskowski.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/littrow.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/miller.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon2} from \"./math\";\n\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;\n  return [\n    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))\n  ];\n}\n\nnaturalEarth2Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta, phi2, phi4, phi6;\n  do {\n    phi2 = phi * phi; phi4 = phi2 * phi2;\n    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /\n      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;\n  return [\n    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth2Raw)\n      .scale(175.295);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/naturalEarth2.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/nellHammer.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math\";\nimport {solve} from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\n  else if (phi === 0) return [lambda, 0];\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\n    c = (2 * phi) / pi,\n    d = (1 - c * c) / (sinPhi - c);\n\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\n    m = M * M + (q * q) / b2d2,\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\n\n  return [\n    halfPi * (M + sqrt(m) * s),\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\n  ];\n}\n\nnicolosiRaw.invert = function(x, y) {\n\n  x /= halfPi;\n  y /= halfPi;\n\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n\n  return [\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\n    solve(function(phi) {\n      return (\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\n        4 * phi * phi * (y - sin(phi)) +\n        2 * pi * phi -\n        pi2 * y\n      );\n    }, 0)\n  ];\n};\n\nexport default function() {\n  return projection(nicolosiRaw)\n    .scale(127.267);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/nicolosi.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/patterson.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/polyconic.js\n// module id = null\n// module chunks = ","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/polyhedral/octahedron.js\n// module id = null\n// module chunks = ","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/polyhedral/collignon.js\n// module id = null\n// module chunks = ","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/rectangularPolyconic.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/robinson.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/times.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten2.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten3.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/vanDerGrinten4.js\n// module id = null\n// module chunks = ","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan} from \"./math\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [\n      cx * c0 * c1 * sin(lambda),\n      cy * s * c1\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [\n      atan2(x * tan(c), cx * p) / n,\n      p && asin(y * sin(c) / (cy * m1 * p)) / m2\n    ];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation/100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio  = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\n\nexport default function() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function(_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection\n    .scale(163.775);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner4.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner6.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wagner7.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/wiechel.js\n// module id = null\n// module chunks = ","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/d3-geo-projection/src/winkel3.js\n// module id = null\n// module chunks = ","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n *\n * ```\n * Copyright 2017 Mike Bostock\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\n// @ts-ignore\nimport * as d3geoprojection from \"d3-geo-projection\";\n\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.d3Projection = d3geoprojection.geoMiller();\n\t}\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\n// @ts-ignore\r\nimport * as d3geoprojection from \"d3-geo-projection\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geoprojection.geoEckert6();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoOrthographic();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Stereographic extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoStereographic();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Stereographic\"] = Stereographic;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Stereographic.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Albers extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoAlbers();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Albers\"] = Albers;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Albers.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class AlbersUsa extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoAlbersUsa();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AlbersUsa\"] = AlbersUsa;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/AlbersUsa.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class NaturalEarth1 extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoNaturalEarth1();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NaturalEarth1\"] = NaturalEarth1;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/NaturalEarth1.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class AzimuthalEqualArea extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoAzimuthalEqualArea();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AzimuthalEqualArea\"] = AzimuthalEqualArea;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/AzimuthalEqualArea.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class EqualEarth extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoEqualEarth();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"EqualEarth\"] = EqualEarth;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/EqualEarth.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = null\n// module chunks = ","'use strict';\n\nmodule.exports = TinyQueue;\nmodule.exports.default = TinyQueue;\n\nfunction TinyQueue(data, compare) {\n    if (!(this instanceof TinyQueue)) return new TinyQueue(data, compare);\n\n    this.data = data || [];\n    this.length = this.data.length;\n    this.compare = compare || defaultCompare;\n\n    if (this.length > 0) {\n        for (var i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nTinyQueue.prototype = {\n\n    push: function (item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    },\n\n    pop: function () {\n        if (this.length === 0) return undefined;\n\n        var top = this.data[0];\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = this.data[this.length];\n            this._down(0);\n        }\n        this.data.pop();\n\n        return top;\n    },\n\n    peek: function () {\n        return this.data[0];\n    },\n\n    _up: function (pos) {\n        var data = this.data;\n        var compare = this.compare;\n        var item = data[pos];\n\n        while (pos > 0) {\n            var parent = (pos - 1) >> 1;\n            var current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    },\n\n    _down: function (pos) {\n        var data = this.data;\n        var compare = this.compare;\n        var halfLength = this.length >> 1;\n        var item = data[pos];\n\n        while (pos < halfLength) {\n            var left = (pos << 1) + 1;\n            var right = left + 1;\n            var best = data[left];\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/tinyqueue/index.js\n// module id = QaCB\n// module chunks = cc1e","'use strict';\n\nvar Queue = require('tinyqueue');\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n    precision = precision || 1.0;\n\n    // find the bounding box of the outer ring\n    var minX, minY, maxX, maxY;\n    for (var i = 0; i < polygon[0].length; i++) {\n        var p = polygon[0][i];\n        if (!i || p[0] < minX) minX = p[0];\n        if (!i || p[1] < minY) minY = p[1];\n        if (!i || p[0] > maxX) maxX = p[0];\n        if (!i || p[1] > maxY) maxY = p[1];\n    }\n\n    var width = maxX - minX;\n    var height = maxY - minY;\n    var cellSize = Math.min(width, height);\n    var h = cellSize / 2;\n\n    // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n    var cellQueue = new Queue(null, compareMax);\n\n    if (cellSize === 0) return [minX, minY];\n\n    // cover polygon with initial cells\n    for (var x = minX; x < maxX; x += cellSize) {\n        for (var y = minY; y < maxY; y += cellSize) {\n            cellQueue.push(new Cell(x + h, y + h, h, polygon));\n        }\n    }\n\n    // take centroid as the first best guess\n    var bestCell = getCentroidCell(polygon);\n\n    // special case for rectangular polygons\n    var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n    if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n\n    var numProbes = cellQueue.length;\n\n    while (cellQueue.length) {\n        // pick the most promising cell from the queue\n        var cell = cellQueue.pop();\n\n        // update the best cell if we found a better one\n        if (cell.d > bestCell.d) {\n            bestCell = cell;\n            if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n        }\n\n        // do not drill down further if there's no chance of a better solution\n        if (cell.max - bestCell.d <= precision) continue;\n\n        // split the cell into four cells\n        h = cell.h / 2;\n        cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n        numProbes += 4;\n    }\n\n    if (debug) {\n        console.log('num probes: ' + numProbes);\n        console.log('best distance: ' + bestCell.d);\n    }\n\n    return [bestCell.x, bestCell.y];\n}\n\nfunction compareMax(a, b) {\n    return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n    this.x = x; // cell center x\n    this.y = y; // cell center y\n    this.h = h; // half the cell size\n    this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n    this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n}\n\n// signed distance from point to polygon outline (negative if point is outside)\nfunction pointToPolygonDist(x, y, polygon) {\n    var inside = false;\n    var minDistSq = Infinity;\n\n    for (var k = 0; k < polygon.length; k++) {\n        var ring = polygon[k];\n\n        for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n            var a = ring[i];\n            var b = ring[j];\n\n            if ((a[1] > y !== b[1] > y) &&\n                (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])) inside = !inside;\n\n            minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n        }\n    }\n\n    return (inside ? 1 : -1) * Math.sqrt(minDistSq);\n}\n\n// get polygon centroid\nfunction getCentroidCell(polygon) {\n    var area = 0;\n    var x = 0;\n    var y = 0;\n    var points = polygon[0];\n\n    for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n        var a = points[i];\n        var b = points[j];\n        var f = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * f;\n        y += (a[1] + b[1]) * f;\n        area += f * 3;\n    }\n    if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n    return new Cell(x / area, y / area, 0, polygon);\n}\n\n// get squared distance from a point to a segment\nfunction getSegDistSq(px, py, a, b) {\n\n    var x = a[0];\n    var y = a[1];\n    var dx = b[0] - x;\n    var dy = b[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = b[0];\n            y = b[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Dropbox/www/amcharts4dev/node_modules/polylabel/index.js\n// module id = U8r1\n// module chunks = cc1e"],"sourceRoot":""}